// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package scryfall

import (
	"context"
	"database/sql"
)

const getCards = `-- name: GetCards :many
SELECT arena_id, id, lang, mtgo_id, mtgo_foil_id, multiverse_ids, tcgplayer_id, tcgplayer_etched_id, cardmarket_id, object, layout, oracle_id, prints_search_uri, rulings_uri, scryfall_uri, uri, all_parts, card_faces, cmc, color_identity, color_indicator, colors, defense, edhrec_rank, game_changer, hand_modifier, keywords, legalities, life_modifier, loyalty, mana_cost, name, oracle_text, penny_rank, power, produced_mana, reserved, toughness, type_line, artist, artist_ids, attraction_lights, booster, border_color, card_back_id, collector_number, content_warning, digital, finishes, flavor_name, flavor_text, frame_effects, frame, full_art, games, highres_image, illustration_id, image_status, image_uris, oversized, prices, printed_name, printed_text, printed_type_line, promo, promo_types, purchase_uris, rarity, related_uris, released_at, reprint, scryfall_set_uri, set_name, set_search_uri, set_type, set_uri, set_code, set_id, story_spotlight, textless, variation, variation_of, security_stamp, watermark, preview FROM cards
`

// Get all cards
func (q *Queries) GetCards(ctx context.Context) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, getCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ArenaID,
			&i.ID,
			&i.Lang,
			&i.MtgoID,
			&i.MtgoFoilID,
			&i.MultiverseIds,
			&i.TcgplayerID,
			&i.TcgplayerEtchedID,
			&i.CardmarketID,
			&i.Object,
			&i.Layout,
			&i.OracleID,
			&i.PrintsSearchUri,
			&i.RulingsUri,
			&i.ScryfallUri,
			&i.Uri,
			&i.AllParts,
			&i.CardFaces,
			&i.Cmc,
			&i.ColorIdentity,
			&i.ColorIndicator,
			&i.Colors,
			&i.Defense,
			&i.EdhrecRank,
			&i.GameChanger,
			&i.HandModifier,
			&i.Keywords,
			&i.Legalities,
			&i.LifeModifier,
			&i.Loyalty,
			&i.ManaCost,
			&i.Name,
			&i.OracleText,
			&i.PennyRank,
			&i.Power,
			&i.ProducedMana,
			&i.Reserved,
			&i.Toughness,
			&i.TypeLine,
			&i.Artist,
			&i.ArtistIds,
			&i.AttractionLights,
			&i.Booster,
			&i.BorderColor,
			&i.CardBackID,
			&i.CollectorNumber,
			&i.ContentWarning,
			&i.Digital,
			&i.Finishes,
			&i.FlavorName,
			&i.FlavorText,
			&i.FrameEffects,
			&i.Frame,
			&i.FullArt,
			&i.Games,
			&i.HighresImage,
			&i.IllustrationID,
			&i.ImageStatus,
			&i.ImageUris,
			&i.Oversized,
			&i.Prices,
			&i.PrintedName,
			&i.PrintedText,
			&i.PrintedTypeLine,
			&i.Promo,
			&i.PromoTypes,
			&i.PurchaseUris,
			&i.Rarity,
			&i.RelatedUris,
			&i.ReleasedAt,
			&i.Reprint,
			&i.ScryfallSetUri,
			&i.SetName,
			&i.SetSearchUri,
			&i.SetType,
			&i.SetUri,
			&i.SetCode,
			&i.SetID,
			&i.StorySpotlight,
			&i.Textless,
			&i.Variation,
			&i.VariationOf,
			&i.SecurityStamp,
			&i.Watermark,
			&i.Preview,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCard = `-- name: UpsertCard :exec
INSERT INTO cards (
    arena_id, id, lang, mtgo_id, mtgo_foil_id, multiverse_ids,
    tcgplayer_id, tcgplayer_etched_id, cardmarket_id, object, layout, oracle_id,
    prints_search_uri, rulings_uri, scryfall_uri, uri, all_parts, card_faces,
    cmc, color_identity, color_indicator, colors, defense, edhrec_rank,
    game_changer, hand_modifier, keywords, legalities, life_modifier, loyalty,
    mana_cost, name, oracle_text, penny_rank, power, produced_mana, reserved,
    toughness, type_line, artist, artist_ids, attraction_lights, booster,
    border_color, card_back_id, collector_number, content_warning, digital,
    finishes, flavor_name, flavor_text, frame_effects, frame, full_art, games,
    highres_image, illustration_id, image_status, image_uris, oversized, prices,
    printed_name, printed_text, printed_type_line, promo, promo_types,
    purchase_uris, rarity, related_uris, released_at, reprint, scryfall_set_uri,
    set_name, set_search_uri, set_type, set_uri, set_code, set_id,
    story_spotlight, textless, variation, variation_of, security_stamp,
    watermark, preview
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
    ?, ?, ?, ?, ?, ?, ?
)
ON CONFLICT(id) DO UPDATE SET
    arena_id = excluded.arena_id,
    lang = excluded.lang,
    mtgo_id = excluded.mtgo_id,
    mtgo_foil_id = excluded.mtgo_foil_id,
    multiverse_ids = excluded.multiverse_ids,
    tcgplayer_id = excluded.tcgplayer_id,
    tcgplayer_etched_id = excluded.tcgplayer_etched_id,
    cardmarket_id = excluded.cardmarket_id,
    object = excluded.object,
    layout = excluded.layout,
    oracle_id = excluded.oracle_id,
    prints_search_uri = excluded.prints_search_uri,
    rulings_uri = excluded.rulings_uri,
    scryfall_uri = excluded.scryfall_uri,
    uri = excluded.uri,
    all_parts = excluded.all_parts,
    card_faces = excluded.card_faces,
    cmc = excluded.cmc,
    color_identity = excluded.color_identity,
    color_indicator = excluded.color_indicator,
    colors = excluded.colors,
    defense = excluded.defense,
    edhrec_rank = excluded.edhrec_rank,
    game_changer = excluded.game_changer,
    hand_modifier = excluded.hand_modifier,
    keywords = excluded.keywords,
    legalities = excluded.legalities,
    life_modifier = excluded.life_modifier,
    loyalty = excluded.loyalty,
    mana_cost = excluded.mana_cost,
    name = excluded.name,
    oracle_text = excluded.oracle_text,
    penny_rank = excluded.penny_rank,
    power = excluded.power,
    produced_mana = excluded.produced_mana,
    reserved = excluded.reserved,
    toughness = excluded.toughness,
    type_line = excluded.type_line,
    artist = excluded.artist,
    artist_ids = excluded.artist_ids,
    attraction_lights = excluded.attraction_lights,
    booster = excluded.booster,
    border_color = excluded.border_color,
    card_back_id = excluded.card_back_id,
    collector_number = excluded.collector_number,
    content_warning = excluded.content_warning,
    digital = excluded.digital,
    finishes = excluded.finishes,
    flavor_name = excluded.flavor_name,
    flavor_text = excluded.flavor_text,
    frame_effects = excluded.frame_effects,
    frame = excluded.frame,
    full_art = excluded.full_art,
    games = excluded.games,
    highres_image = excluded.highres_image,
    illustration_id = excluded.illustration_id,
    image_status = excluded.image_status,
    image_uris = excluded.image_uris,
    oversized = excluded.oversized,
    prices = excluded.prices,
    printed_name = excluded.printed_name,
    printed_text = excluded.printed_text,
    printed_type_line = excluded.printed_type_line,
    promo = excluded.promo,
    promo_types = excluded.promo_types,
    purchase_uris = excluded.purchase_uris,
    rarity = excluded.rarity,
    related_uris = excluded.related_uris,
    released_at = excluded.released_at,
    reprint = excluded.reprint,
    scryfall_set_uri = excluded.scryfall_set_uri,
    set_name = excluded.set_name,
    set_search_uri = excluded.set_search_uri,
    set_type = excluded.set_type,
    set_uri = excluded.set_uri,
    set_code = excluded.set_code,
    set_id = excluded.set_id,
    story_spotlight = excluded.story_spotlight,
    textless = excluded.textless,
    variation = excluded.variation,
    variation_of = excluded.variation_of,
    security_stamp = excluded.security_stamp,
    watermark = excluded.watermark,
    preview = excluded.preview
`

type UpsertCardParams struct {
	ArenaID           sql.NullInt64
	ID                string
	Lang              string
	MtgoID            sql.NullInt64
	MtgoFoilID        sql.NullInt64
	MultiverseIds     sql.NullString
	TcgplayerID       sql.NullInt64
	TcgplayerEtchedID sql.NullInt64
	CardmarketID      sql.NullInt64
	Object            string
	Layout            string
	OracleID          sql.NullString
	PrintsSearchUri   string
	RulingsUri        string
	ScryfallUri       string
	Uri               string
	AllParts          sql.NullString
	CardFaces         sql.NullString
	Cmc               float64
	ColorIdentity     sql.NullString
	ColorIndicator    sql.NullString
	Colors            sql.NullString
	Defense           sql.NullString
	EdhrecRank        sql.NullInt64
	GameChanger       sql.NullBool
	HandModifier      sql.NullString
	Keywords          sql.NullString
	Legalities        sql.NullString
	LifeModifier      sql.NullString
	Loyalty           sql.NullString
	ManaCost          sql.NullString
	Name              string
	OracleText        sql.NullString
	PennyRank         sql.NullInt64
	Power             sql.NullString
	ProducedMana      sql.NullString
	Reserved          bool
	Toughness         sql.NullString
	TypeLine          string
	Artist            sql.NullString
	ArtistIds         sql.NullString
	AttractionLights  sql.NullString
	Booster           bool
	BorderColor       string
	CardBackID        string
	CollectorNumber   string
	ContentWarning    sql.NullBool
	Digital           bool
	Finishes          sql.NullString
	FlavorName        sql.NullString
	FlavorText        sql.NullString
	FrameEffects      sql.NullString
	Frame             string
	FullArt           bool
	Games             sql.NullString
	HighresImage      bool
	IllustrationID    sql.NullString
	ImageStatus       string
	ImageUris         sql.NullString
	Oversized         bool
	Prices            sql.NullString
	PrintedName       sql.NullString
	PrintedText       sql.NullString
	PrintedTypeLine   sql.NullString
	Promo             bool
	PromoTypes        sql.NullString
	PurchaseUris      sql.NullString
	Rarity            string
	RelatedUris       sql.NullString
	ReleasedAt        string
	Reprint           bool
	ScryfallSetUri    string
	SetName           string
	SetSearchUri      string
	SetType           string
	SetUri            string
	SetCode           string
	SetID             string
	StorySpotlight    bool
	Textless          bool
	Variation         bool
	VariationOf       sql.NullString
	SecurityStamp     sql.NullString
	Watermark         sql.NullString
	Preview           sql.NullString
}

// Insert or update a card
func (q *Queries) UpsertCard(ctx context.Context, arg UpsertCardParams) error {
	_, err := q.db.ExecContext(ctx, upsertCard,
		arg.ArenaID,
		arg.ID,
		arg.Lang,
		arg.MtgoID,
		arg.MtgoFoilID,
		arg.MultiverseIds,
		arg.TcgplayerID,
		arg.TcgplayerEtchedID,
		arg.CardmarketID,
		arg.Object,
		arg.Layout,
		arg.OracleID,
		arg.PrintsSearchUri,
		arg.RulingsUri,
		arg.ScryfallUri,
		arg.Uri,
		arg.AllParts,
		arg.CardFaces,
		arg.Cmc,
		arg.ColorIdentity,
		arg.ColorIndicator,
		arg.Colors,
		arg.Defense,
		arg.EdhrecRank,
		arg.GameChanger,
		arg.HandModifier,
		arg.Keywords,
		arg.Legalities,
		arg.LifeModifier,
		arg.Loyalty,
		arg.ManaCost,
		arg.Name,
		arg.OracleText,
		arg.PennyRank,
		arg.Power,
		arg.ProducedMana,
		arg.Reserved,
		arg.Toughness,
		arg.TypeLine,
		arg.Artist,
		arg.ArtistIds,
		arg.AttractionLights,
		arg.Booster,
		arg.BorderColor,
		arg.CardBackID,
		arg.CollectorNumber,
		arg.ContentWarning,
		arg.Digital,
		arg.Finishes,
		arg.FlavorName,
		arg.FlavorText,
		arg.FrameEffects,
		arg.Frame,
		arg.FullArt,
		arg.Games,
		arg.HighresImage,
		arg.IllustrationID,
		arg.ImageStatus,
		arg.ImageUris,
		arg.Oversized,
		arg.Prices,
		arg.PrintedName,
		arg.PrintedText,
		arg.PrintedTypeLine,
		arg.Promo,
		arg.PromoTypes,
		arg.PurchaseUris,
		arg.Rarity,
		arg.RelatedUris,
		arg.ReleasedAt,
		arg.Reprint,
		arg.ScryfallSetUri,
		arg.SetName,
		arg.SetSearchUri,
		arg.SetType,
		arg.SetUri,
		arg.SetCode,
		arg.SetID,
		arg.StorySpotlight,
		arg.Textless,
		arg.Variation,
		arg.VariationOf,
		arg.SecurityStamp,
		arg.Watermark,
		arg.Preview,
	)
	return err
}
