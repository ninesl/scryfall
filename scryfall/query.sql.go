// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package scryfall

import (
	"context"
	"database/sql"
)

const getCardsWithPrintings = `-- name: GetCardsWithPrintings :many
SELECT 
    c.oracle_id,
    c.name,
    c.layout,
    c.cmc,
    c.color_identity,
    c.colors,
    c.mana_cost,
    c.oracle_text,
    c.type_line,
    p.id as printing_id,
    p.rarity,
    p.games,
    p."set",
    p.set_name,
    p.released_at
FROM cards c
JOIN printings p ON c.oracle_id = p.oracle_id
ORDER BY c.name, p.released_at DESC
`

type GetCardsWithPrintingsRow struct {
	OracleID      string
	Name          string
	Layout        string
	Cmc           float64
	ColorIdentity string
	Colors        sql.NullString
	ManaCost      sql.NullString
	OracleText    sql.NullString
	TypeLine      string
	PrintingID    string
	Rarity        string
	Games         string
	Set           string
	SetName       string
	ReleasedAt    string
}

// Get all cards with their printings
func (q *Queries) GetCardsWithPrintings(ctx context.Context) ([]GetCardsWithPrintingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCardsWithPrintings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCardsWithPrintingsRow
	for rows.Next() {
		var i GetCardsWithPrintingsRow
		if err := rows.Scan(
			&i.OracleID,
			&i.Name,
			&i.Layout,
			&i.Cmc,
			&i.ColorIdentity,
			&i.Colors,
			&i.ManaCost,
			&i.OracleText,
			&i.TypeLine,
			&i.PrintingID,
			&i.Rarity,
			&i.Games,
			&i.Set,
			&i.SetName,
			&i.ReleasedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCard = `-- name: UpsertCard :exec
INSERT INTO cards (
    oracle_id, name, layout, prints_search_uri, rulings_uri,
    all_parts, card_faces, cmc, color_identity, color_indicator, colors,
    defense, edhrec_rank, game_changer, hand_modifier, keywords, legalities,
    life_modifier, loyalty, mana_cost, oracle_text, penny_rank, power,
    produced_mana, reserved, toughness, type_line
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
ON CONFLICT(oracle_id) DO UPDATE SET
    name = excluded.name,
    layout = excluded.layout,
    prints_search_uri = excluded.prints_search_uri,
    rulings_uri = excluded.rulings_uri,
    all_parts = excluded.all_parts,
    card_faces = excluded.card_faces,
    cmc = excluded.cmc,
    color_identity = excluded.color_identity,
    color_indicator = excluded.color_indicator,
    colors = excluded.colors,
    defense = excluded.defense,
    edhrec_rank = excluded.edhrec_rank,
    game_changer = excluded.game_changer,
    hand_modifier = excluded.hand_modifier,
    keywords = excluded.keywords,
    legalities = excluded.legalities,
    life_modifier = excluded.life_modifier,
    loyalty = excluded.loyalty,
    mana_cost = excluded.mana_cost,
    oracle_text = excluded.oracle_text,
    penny_rank = excluded.penny_rank,
    power = excluded.power,
    produced_mana = excluded.produced_mana,
    reserved = excluded.reserved,
    toughness = excluded.toughness,
    type_line = excluded.type_line
`

type UpsertCardParams struct {
	OracleID        string
	Name            string
	Layout          string
	PrintsSearchUri string
	RulingsUri      string
	AllParts        sql.NullString
	CardFaces       sql.NullString
	Cmc             float64
	ColorIdentity   string
	ColorIndicator  sql.NullString
	Colors          sql.NullString
	Defense         sql.NullString
	EdhrecRank      sql.NullInt64
	GameChanger     sql.NullBool
	HandModifier    sql.NullString
	Keywords        string
	Legalities      string
	LifeModifier    sql.NullString
	Loyalty         sql.NullString
	ManaCost        sql.NullString
	OracleText      sql.NullString
	PennyRank       sql.NullInt64
	Power           sql.NullString
	ProducedMana    sql.NullString
	Reserved        bool
	Toughness       sql.NullString
	TypeLine        string
}

// Insert or update a card (oracle-level)
func (q *Queries) UpsertCard(ctx context.Context, arg UpsertCardParams) error {
	_, err := q.db.ExecContext(ctx, upsertCard,
		arg.OracleID,
		arg.Name,
		arg.Layout,
		arg.PrintsSearchUri,
		arg.RulingsUri,
		arg.AllParts,
		arg.CardFaces,
		arg.Cmc,
		arg.ColorIdentity,
		arg.ColorIndicator,
		arg.Colors,
		arg.Defense,
		arg.EdhrecRank,
		arg.GameChanger,
		arg.HandModifier,
		arg.Keywords,
		arg.Legalities,
		arg.LifeModifier,
		arg.Loyalty,
		arg.ManaCost,
		arg.OracleText,
		arg.PennyRank,
		arg.Power,
		arg.ProducedMana,
		arg.Reserved,
		arg.Toughness,
		arg.TypeLine,
	)
	return err
}

const upsertPrinting = `-- name: UpsertPrinting :exec
INSERT INTO printings (
    id, oracle_id, arena_id, lang, mtgo_id, mtgo_foil_id, multiverse_ids,
    tcgplayer_id, tcgplayer_etched_id, cardmarket_id, object, scryfall_uri, uri,
    artist, artist_ids, attraction_lights, booster, border_color, card_back_id,
    collector_number, content_warning, digital, finishes, flavor_name, flavor_text,
    foil, nonfoil, frame_effects, frame, full_art, games, highres_image,
    illustration_id, image_status, image_uris, oversized, prices, printed_name,
    printed_text, printed_type_line, promo, promo_types, purchase_uris, rarity,
    related_uris, released_at, reprint, scryfall_set_uri, set_name, set_search_uri,
    set_type, set_uri, "set", set_id, story_spotlight, textless, variation,
    variation_of, security_stamp, watermark, preview
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
ON CONFLICT(id) DO UPDATE SET
    oracle_id = excluded.oracle_id,
    arena_id = excluded.arena_id,
    lang = excluded.lang,
    mtgo_id = excluded.mtgo_id,
    mtgo_foil_id = excluded.mtgo_foil_id,
    multiverse_ids = excluded.multiverse_ids,
    tcgplayer_id = excluded.tcgplayer_id,
    tcgplayer_etched_id = excluded.tcgplayer_etched_id,
    cardmarket_id = excluded.cardmarket_id,
    object = excluded.object,
    scryfall_uri = excluded.scryfall_uri,
    uri = excluded.uri,
    artist = excluded.artist,
    artist_ids = excluded.artist_ids,
    attraction_lights = excluded.attraction_lights,
    booster = excluded.booster,
    border_color = excluded.border_color,
    card_back_id = excluded.card_back_id,
    collector_number = excluded.collector_number,
    content_warning = excluded.content_warning,
    digital = excluded.digital,
    finishes = excluded.finishes,
    flavor_name = excluded.flavor_name,
    flavor_text = excluded.flavor_text,
    foil = excluded.foil,
    nonfoil = excluded.nonfoil,
    frame_effects = excluded.frame_effects,
    frame = excluded.frame,
    full_art = excluded.full_art,
    games = excluded.games,
    highres_image = excluded.highres_image,
    illustration_id = excluded.illustration_id,
    image_status = excluded.image_status,
    image_uris = excluded.image_uris,
    oversized = excluded.oversized,
    prices = excluded.prices,
    printed_name = excluded.printed_name,
    printed_text = excluded.printed_text,
    printed_type_line = excluded.printed_type_line,
    promo = excluded.promo,
    promo_types = excluded.promo_types,
    purchase_uris = excluded.purchase_uris,
    rarity = excluded.rarity,
    related_uris = excluded.related_uris,
    released_at = excluded.released_at,
    reprint = excluded.reprint,
    scryfall_set_uri = excluded.scryfall_set_uri,
    set_name = excluded.set_name,
    set_search_uri = excluded.set_search_uri,
    set_type = excluded.set_type,
    set_uri = excluded.set_uri,
    "set" = excluded."set",
    set_id = excluded.set_id,
    story_spotlight = excluded.story_spotlight,
    textless = excluded.textless,
    variation = excluded.variation,
    variation_of = excluded.variation_of,
    security_stamp = excluded.security_stamp,
    watermark = excluded.watermark,
    preview = excluded.preview
`

type UpsertPrintingParams struct {
	ID                string
	OracleID          string
	ArenaID           sql.NullInt64
	Lang              string
	MtgoID            sql.NullInt64
	MtgoFoilID        sql.NullInt64
	MultiverseIds     sql.NullString
	TcgplayerID       sql.NullInt64
	TcgplayerEtchedID sql.NullInt64
	CardmarketID      sql.NullInt64
	Object            string
	ScryfallUri       string
	Uri               string
	Artist            sql.NullString
	ArtistIds         sql.NullString
	AttractionLights  sql.NullString
	Booster           bool
	BorderColor       string
	CardBackID        string
	CollectorNumber   string
	ContentWarning    sql.NullBool
	Digital           bool
	Finishes          string
	FlavorName        sql.NullString
	FlavorText        sql.NullString
	Foil              bool
	Nonfoil           bool
	FrameEffects      sql.NullString
	Frame             string
	FullArt           bool
	Games             string
	HighresImage      bool
	IllustrationID    sql.NullString
	ImageStatus       string
	ImageUris         sql.NullString
	Oversized         bool
	Prices            string
	PrintedName       sql.NullString
	PrintedText       sql.NullString
	PrintedTypeLine   sql.NullString
	Promo             bool
	PromoTypes        sql.NullString
	PurchaseUris      sql.NullString
	Rarity            string
	RelatedUris       string
	ReleasedAt        string
	Reprint           bool
	ScryfallSetUri    string
	SetName           string
	SetSearchUri      string
	SetType           string
	SetUri            string
	Set               string
	SetID             string
	StorySpotlight    bool
	Textless          bool
	Variation         bool
	VariationOf       sql.NullString
	SecurityStamp     sql.NullString
	Watermark         sql.NullString
	Preview           sql.NullString
}

// Insert or update a printing
func (q *Queries) UpsertPrinting(ctx context.Context, arg UpsertPrintingParams) error {
	_, err := q.db.ExecContext(ctx, upsertPrinting,
		arg.ID,
		arg.OracleID,
		arg.ArenaID,
		arg.Lang,
		arg.MtgoID,
		arg.MtgoFoilID,
		arg.MultiverseIds,
		arg.TcgplayerID,
		arg.TcgplayerEtchedID,
		arg.CardmarketID,
		arg.Object,
		arg.ScryfallUri,
		arg.Uri,
		arg.Artist,
		arg.ArtistIds,
		arg.AttractionLights,
		arg.Booster,
		arg.BorderColor,
		arg.CardBackID,
		arg.CollectorNumber,
		arg.ContentWarning,
		arg.Digital,
		arg.Finishes,
		arg.FlavorName,
		arg.FlavorText,
		arg.Foil,
		arg.Nonfoil,
		arg.FrameEffects,
		arg.Frame,
		arg.FullArt,
		arg.Games,
		arg.HighresImage,
		arg.IllustrationID,
		arg.ImageStatus,
		arg.ImageUris,
		arg.Oversized,
		arg.Prices,
		arg.PrintedName,
		arg.PrintedText,
		arg.PrintedTypeLine,
		arg.Promo,
		arg.PromoTypes,
		arg.PurchaseUris,
		arg.Rarity,
		arg.RelatedUris,
		arg.ReleasedAt,
		arg.Reprint,
		arg.ScryfallSetUri,
		arg.SetName,
		arg.SetSearchUri,
		arg.SetType,
		arg.SetUri,
		arg.Set,
		arg.SetID,
		arg.StorySpotlight,
		arg.Textless,
		arg.Variation,
		arg.VariationOf,
		arg.SecurityStamp,
		arg.Watermark,
		arg.Preview,
	)
	return err
}
